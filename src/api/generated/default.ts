/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * mock llm
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { MockLiascriptResponse } from './model';

import { apiInstance } from '../instance';

/**
 * @summary Get Mock Liascript
 */
export const getMockLiaScript = (signal?: AbortSignal) => {
  return apiInstance<MockLiascriptResponse>({
    url: `/mock-liascript`,
    method: 'GET',
    signal,
  });
};

export const getGetMockLiaScriptQueryKey = () => {
  return [`/mock-liascript`] as const;
};

export const getGetMockLiaScriptQueryOptions = <
  TData = Awaited<ReturnType<typeof getMockLiaScript>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getMockLiaScript>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMockLiaScriptQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMockLiaScript>>
  > = ({ signal }) => getMockLiaScript(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMockLiaScript>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMockLiaScriptQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMockLiaScript>>
>;
export type GetMockLiaScriptQueryError = unknown;

export function useGetMockLiaScript<
  TData = Awaited<ReturnType<typeof getMockLiaScript>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMockLiaScript>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMockLiaScript>>,
          TError,
          Awaited<ReturnType<typeof getMockLiaScript>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMockLiaScript<
  TData = Awaited<ReturnType<typeof getMockLiaScript>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMockLiaScript>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMockLiaScript>>,
          TError,
          Awaited<ReturnType<typeof getMockLiaScript>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMockLiaScript<
  TData = Awaited<ReturnType<typeof getMockLiaScript>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMockLiaScript>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Mock Liascript
 */

export function useGetMockLiaScript<
  TData = Awaited<ReturnType<typeof getMockLiaScript>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMockLiaScript>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMockLiaScriptQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
